package my.day03.b.operator;

public class OperatorMain {

	public static void main(String[] args) {
		
		// ~~~~~~~~~~~~ 연산자 ~~~~~~~~~~~~~~ //
		
		// #### 1. 산술연산자 ####
		// 		+ - * / %(나머지)		<<	>>	>>>
		
		System.out.println("=== 1.산술연산자 + - * / %(나머지) << >> >>>");
		
		int n = 10;
		System.out.println("n+3 = " + (n+3)); 		  		  // n+3 = 13
		System.out.println("n-3 = " + (n-3)); 		  		  // n-3 = 7
		System.out.println("n*3 = " + (n*3)); 				  // n*3 = 30
		System.out.println("n/3 = " + (n/3)); 		  		  // n/3 = 3
		System.out.println("(double)n+3 = " + ((double)n/3)); // n/3 = 3.333333333333
		System.out.println("n%3 = " + (n%3)); 				  // n%3 = 1	10을 3으로 나누었을 때의 나머지
		
		System.out.println("n<<3 = " + (n<<3)); 		      // n<<3 = 80
		/*
		 * << 는 왼족 쉬프트 연산자
		 * 
		 * int 는 4byte 이므로 32bit 로 구성된다.
		 * 10<<3은 정수 10을 이진수	00000000 00000000 00000000 00001010
		 * 왼쪽방향으로 3개를 밀어버린다.
		 * 그러면 000000 00000000 00000000 00001010___ 이 되는데
		 * 그런 다음에 _ 자리에 0으로 채운다.
		 * 즉, 000000 00000000 00000000 00001010000 이 된다.
		 * 이진수 00000000 00000000 00000000 001010000 이 되는데 이것을 십진수로 나타내면
		 * 1*(2의6승) + 1*(2의4승)
		 * 64 + 16 = 80 이 된다.
		 * 이것은 10 * (2의 3승) ==> 10*(2의 3승) 와 같은 것이 된다. 그러므로 80이다.
		 * 
		 */
		
		System.out.println("n>>2 = " + (n>>2));
		/*
		 * >> 는 오른쪽 쉬프트 연산자
		 * int 는 4byte 이므로 32bit 로 구성된다.
		 * 10>>2은 정수 10을 이진수	00000000 00000000 00000000 00001010
		 * 왼쪽방향으로 2개를 밀어버린다.
		 * 그러면 __000000 00000000 00000000 000010 이 되는데
		 * 그런 다음에 _ 자리에 정수 10의 부호비트(가장 왼쪽 비트1개, 0이면 양수이고, 1이면 음수를 말하는 것이다.)와 같은 값으로 채운다.
		 * 즉, 000000000 00000000 00000000 000010 이 된다.
		 * 이진수 00000000 00000000 00000000 000000010 이 되는데 이것을 십진수로 나타내면
		 * 1*(2의1승)
		 * 2 가 된다.
		 * 이것은 10 / (2의 2승) ==> 10/(2의 2승) 와 같은 것이 된다. 그러므로 2이다.
		 */
		
		
		System.out.println("n>>>3 = " + (n>>>3));
		/*
		 * >>> 는 오른쪽 쉬프트 연산자
		 * int 는 4byte 이므로 32bit 로 구성된다.
		 * 10>>>3은 정수 10을 이진수	00000000 00000000 00000000 00001010
		 * 오른쪽방향으로 3개를 밀어버린다.
		 * 그러면 ___00000000 00000000 00000000 00001 이 되는데
		 * 그런 다음에 _ 자리에 정수 0 으로 채운다.
		 * 즉, 00000000000 00000000 00000000 00001 이 된다.
		 * 이진수 00000000 00000000 00000000 000000001 이 되는데 이것을 십진수로 나타내면
		 * 1*(2의0승)
		 * 1 이 된다.
		 */
		
		n= -10;
		System.out.println("~~~~ n이 -10인 경우 ~~~~");
		/*
		 * -10을 bit로 나타내어 주는 방법
		 */
		System.out.println("n<<3 = " + (n<<3)); // -10 * (2의3승)
		/*
		 * << 는 왼족 쉬프트 연산자
		 * 
		 * int 는 4byte 이므로 32bit 로 구성된다.
		 * 10<<3은 정수 10을 이진수	00000000 00000000 00000000 00001010
		 * 왼쪽방향으로 3개를 밀어버린다.
		 * 그러면 000000 00000000 00000000 00001010___ 이 되는데
		 * 그런 다음에 _ 자리에 0으로 채운다.
		 * 즉, 000000 00000000 00000000 00001010000 이 된다.
		 * 이진수 00000000 00000000 00000000 001010000 이 되는데 이것을 십진수로 나타내면
		 * 1*(2의6승) + 1*(2의4승)
		 * 64 + 16 = 80 이 된다.
		 * 이것은 10 * (2의 3승) ==> 10*(2의 3승) 와 같은 것이 된다. 그러므로 80이다.
		 * 
		 */
		System.out.println("n>>2 = " + (n>>2));
		
		System.out.println("n>>>3 = " + (n>>>3));
	}

}
